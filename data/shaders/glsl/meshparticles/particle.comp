#version 450

#include "common_particle.h"
#include "gpu_cmd.h"

struct Particle
{
	vec4 pos;
	vec4 color;
};

struct AppendJob 
{
	vec2 screenPos;
};

layout(binding = 3) buffer AppendBuffer
{
   AppendJob appendJobs[];
};

layout(binding = 4) buffer ParticleBuffer
{
   Particle particles[];
};

layout (binding = 5) uniform sampler2D depthTexture;

layout(binding = 6) buffer SSBOGlobalData
{
   GlobalParticleData globalData;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() 
{
	uint id = gl_GlobalInvocationID.x;

	if (id >= globalData.renderCount)
	{
		return;
	}

	Particle particle = particles[id];
	if (id >= globalData.cachedCount && id < globalData.cachedCount + globalData.newEmiitedCount)
	{
		// new particle emitted this frame

		uint jobId = id - globalData.cachedCount;
		AppendJob job = appendJobs[jobId];

		ivec2 screenPos = ivec2(job.screenPos.x, job.screenPos.y);
		float depth = texelFetch(depthTexture, screenPos, 0).r;

		particle.pos = vec4(screenPos.x, screenPos.y, 0.0, 1.0);
		particle.color = vec4(screenPos.x, screenPos.y, depth, 1.0);

		// increase indexs
		atomicAdd(globalData.particleIndex, 1);
	}
	else
	{
		// previous alived particle

	}

	// update particle
	particles[id] = particle;
}

