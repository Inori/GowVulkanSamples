#version 450
#extension GL_EXT_debug_printf : enable

#include "common_particle.h"
#include "gpu_cmd.h"

struct Particle
{
	vec4 pos;
	vec4 color;
	uint frame;
};

struct AppendJob 
{
	vec2 screenPos;
};

layout(binding = 3) buffer AppendBuffer
{
   AppendJob appendJobs[];
};

layout(binding = 4) buffer SpawnBuffer
{
   Particle ring[];
};

layout(binding = 5) buffer ParticleBuffer
{
   Particle particles[];
};

layout(binding = 6) buffer SSBOGlobalData
{
   GlobalParticleData globalData;
};

layout(binding = 7) buffer SSBOGpuCmd
{
   GpuCmdBuffer gpuCmd;
};

layout (binding = 8) uniform sampler2D depthTexture;
layout (binding = 9) uniform sampler2D colorTexture;

layout (local_size_x = PARTICLE_COMPUTE_WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

float rand(vec2 xy, float seed)
{
	float PHI = 1.61803398874989484820459;  // ¦µ = Golden Ratio  
    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

vec3 screenToWorldPosition(vec2 screenPos)
{
	ivec2 iscreen = ivec2(screenPos.x, screenPos.y);

	float x = screenPos.x / viewData.viewport.x;
	float y = screenPos.y / viewData.viewport.y;
	float z = texelFetch(depthTexture, iscreen, 0).r;

	// scale to (-1.0, 1.0)
	x = mix(-1.0, 1.0, x);
	y = mix(-1.0, 1.0, y);
	z = mix(-1.0, 1.0, z);

	vec4 ndc = vec4(x, y, z, 1.0);
	vec4 positionMW = viewData.invViewProj * ndc;

	return positionMW.xyz / positionMW.w;
}

Particle initParticle(uint id)
{
	// new particle emitted this frame
	Particle particle;

	uint jobId = id - globalData.cachedCount;
	AppendJob job = appendJobs[jobId];

	vec2 uv = vec2( job.screenPos.x / viewData.viewport.x, job.screenPos.y / viewData.viewport.y );
	float gray = texture(colorTexture, uv).r;

	vec3 worldPos = screenToWorldPosition(job.screenPos);
	particle.pos = vec4(worldPos, 1.0);
	particle.color = vec4(gray, gray, gray, 1.0);
	particle.frame = particleSystem.frameNum;

	return particle;
}


Particle animateParticle(uint id, Particle particle)
{
	float rnd = rand(vec2(id, id), particleSystem.random);
	/*
		animate particle position
	*/

	vec3 gravity = vec3(0.0, 0.2, 0.0);
	vec3 v = gravity + particleSystem.wind * rnd;
	particle.pos.xyz += v * particleSystem.deltaT;

	/*
		maintain particle lifetime
	*/

	uint framePhase = particleSystem.frameNum - particle.frame;
	float age = float(framePhase) * (particleSystem.deltaT * particleSystem.speed) * 0.01;
	float lifetime = 1.0 - age;
	if (lifetime < 0)
	{
		particle.frame = 0;
		lifetime = -1.0;
	}
	
	particle.color.a = lifetime;

	return particle;
}

void main() 
{
	uint id = gl_GlobalInvocationID.x;

	if (id >= globalData.renderCount)
	{
		return;
	}

	Particle particle;

	if (id >= globalData.cachedCount && id < globalData.cachedCount + globalData.newEmiitedCount)
	{
		particle = initParticle(id);
		atomicAdd(globalData.cachedCount, 1);
	}
	else
	{
		particle = animateParticle(id, ring[id]);
	}

	ring[id] = particle;

	float lifetime = particle.color.a;
	if (lifetime > 0.0)
	{
		// update particle buffer
		uint index = atomicAdd(globalData.particleIndex, 1);
		particles[index] = particle;

		// update vertices count
		// and construct draw command
		atomicAdd(gpuCmd.drawCmd.vertexCount, 1);
		gpuCmd.drawCmd.instanceCount = 1;
		gpuCmd.drawCmd.firstVertex = 0;
		gpuCmd.drawCmd.firstInstance = 0;
	}
}

